;
; Fixed point numbers, 16.4
;
; WWWW WWWW WWWW FFFF
;
; S = Sign bit
; W = Whole part
; F = Fractional part
;

.SEGMENT "PRG"

.STRUCT Libfx164_Val
    lo .BYTE
    hi .BYTE
.ENDSTRUCT

.DEFINE LIBFX164_PARSE(whole, frac) (((whole&$7FF)<<4) | (frac&$F))

.MACRO LIBFX164_SET addr, sign, whole, frac
    .SCOPE
        w := LIBFX164_PARSE(whole, frac)
        .IF sign = 0 || (w = 0)
            LDA #(w&$FF)
            STA addr
            LDA #((w>>8)&$7F)
            STA addr+1
        .ELSE
            LDA #(((w-1)&$FF) ^ $FF)
            STA addr
            LDA #((((w-1)>>8)&$7F) ^ $FF)
            STA addr+1
        .ENDIF
    .ENDSCOPE
.ENDMACRO

.MACRO LIBFX164_ADD addr1, addr2 
    CLC
    LDA addr1
    ADC addr2
    STA addr1
    LDA addr1+1
    ADC addr2+1
    STA addr1+1
.ENDMACRO

.MACRO LIBFX164_SUB addr1, addr2, addr3
    SEC
    LDA addr1
    SBC addr2
    STA addr3
    LDA addr1+1
    SBC addr2+1
    STA addr3+1
.ENDMACRO

.MACRO LIBFX164_CMP addr1, addr2 
    LIBFX164_SUB addr1, addr2, TMP_U16_1
    LDA TMP_U16_1+1
.ENDMACRO

.MACRO LIBFX164_MUL2 addr
    LDA addr
    ASL
    STA addr
    ROL addr+1
.ENDMACRO

.MACRO LIBFX164_DIV2 addr
    LDA addr+1
    CMP #$80
    ROR
    STA addr+1
    LDA addr
    ROR
    STA addr
.ENDMACRO

.MACRO LIBFX164_DIV4 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
.ENDMACRO

.MACRO LIBFX164_DIV8 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
.ENDMACRO

.MACRO LIBFX164_DIV16 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
.ENDMACRO

.MACRO LIBFX164_DIV128 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
    LIBFX164_DIV2 addr
.ENDMACRO

.MACRO LIBFX164_MUL128 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
    LIBFX164_MUL2 addr
.ENDMACRO

; LIBFX164_PAR2_ADDR = address of the number
; Result : A
.PROC libfx164_to_scr
    LDY #$01
    LDA (LIBFX164_PAR2_ADDR), Y
    CMP #$10
    BMI @no_overflow
        LDA #$FF
        RTS

    @no_overflow:
    LDY #$01
    LDA (LIBFX164_PAR2_ADDR), Y
    BPL @no_negative
        LDA #$FF
        RTS

    @no_negative:   
    LDY #$01
    LDA (LIBFX164_PAR2_ADDR), Y
    ASL
    ASL
    ASL
    ASL
    STA TMP_U8_1
    LDY #$00
    LDA (LIBFX164_PAR2_ADDR), Y
    LSR 
    LSR
    LSR
    LSR
    AND #$0F
    ORA TMP_U8_1
    RTS
.ENDPROC

