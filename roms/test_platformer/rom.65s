;; iNES 16 byte header
iNES_Prg16KBanks  = 2
iNES_Chr8KBanks   = 1 
iNES_PpuMirroring = 0 ;0=horizontal, 1=vertical
iNES_MapperNumber = 0 ;nrom

;; NES Common 
NES_PpuCtrl       = $2000
NES_PpuMask       = $2001
NES_PpuStatus     = $2002
NES_PpuScroll     = $2005
NES_PpuAddr       = $2006
NES_PpuData       = $2007
NES_PpuOamDma     = $4014

NES_PpuPalBkg0    = $3F00
NES_PpuPalBkg1    = $3F04
NES_PpuPalBkg2    = $3F08
NES_PpuPalBkg3    = $3F0C
NES_PpuPalObj0    = $3F10
NES_PpuPalObj1    = $3F14
NES_PpuPalObj2    = $3F18
NES_PpuPalObj3    = $3F1C

NES_PpuBkg0       = $2000
NES_PpuBkg1       = $2400
NES_PpuBkg2       = $2800
NES_PpuBkg3       = $2C00

NES_ApuFrame      = $4017
NES_ApuDmc        = $4010

.SEGMENT "HEADER"
.BYTE "NES", $1A
.BYTE iNES_Prg16KBanks
.BYTE iNES_Chr8KBanks
.BYTE iNES_PpuMirroring | ((iNES_MapperNumber&$F)<<4)
.BYTE ((iNES_MapperNumber&$F)<<4)

.SEGMENT "VECTORS"
.WORD _NMI
.WORD _RESET
.WORD _IRQ

.SEGMENT "CHR"
.INCBIN "platformer.chr"

.SEGMENT "ZPG"
ZeropageRegs:       .RES 16
NMI_TraceY:         .RES 1
ScreenID:           .RES 1

.SEGMENT "PRG"

.MACRO U16_Add_U16 addr1, addr2 
  CLC
  LDA addr1
  ADC addr2
  STA addr1
  LDA addr1+1
  ADC addr2+1
  STA addr1+1
.ENDMACRO

.MACRO VBlank_Wait
:
  BIT NES_PpuStatus 
  BPL :-
.ENDMACRO

.MACRO PPU_SetAddr addr
  LDA #>addr
  LDX #<addr
  STA NES_PpuAddr
  STX NES_PpuAddr
.ENDMACRO

.MACRO PPU_SetPal which, pal
  PPU_SetAddr which
  LDA pal+0
  STA NES_PpuData
  LDA pal+1
  STA NES_PpuData
  LDA pal+2
  STA NES_PpuData
  LDA pal+3
  STA NES_PpuData
.ENDMACRO

.PROC _NMI_DrawLine
  _SubTileId      := $00
  _SubTile        := $01
  _MetatileOffs   := $03
  _TileAddr       := $04
  _TempU16        := $06

  ; reset y if we're drawing out of bounds
  LDA NMI_TraceY
  CMP #30
  BNE :+
  LDA #0
  STA NMI_TraceY

  ; Load nametable
: LDA #<NES_PpuBkg0
  STA _TileAddr+0
  LDA #>NES_PpuBkg0
  STA _TileAddr+1

  ; Load translation
  LDX NMI_TraceY
  LDA TLB_Y_lo, X
  STA _TempU16+0
  LDA TLB_Y_hi, X
  STA _TempU16+1 

  U16_Add_U16 _TileAddr, _TempU16
  LDA _TileAddr+1
  STA NES_PpuAddr
  LDA _TileAddr+0
  STA NES_PpuAddr

  ; get Y metatile offset -> _MetatileOffs
  LDA NMI_TraceY
  LSR A
  ASL A
  ASL A
  ASL A
  ASL A
  STA _MetatileOffs
  
;----------------------------
  LDY #0
@loop_lo:
  LDX _MetatileOffs
  LDA DATA_scrval, X
  ASL
  TAX

  LDA DATA_metatiles_lo+0, X
  STA NES_PpuData
  LDA DATA_metatiles_lo+1, X
  STA NES_PpuData

  INC _MetatileOffs
  INY
  CPY #$10
  BNE @loop_lo
  INC NMI_TraceY
;----------------------------
  LDA _MetatileOffs
  CLC
  SBC #15
  STA _MetatileOffs

  LDY #0
@loop_hi:
  LDX _MetatileOffs
  LDA DATA_scrval, X
  ASL
  TAX

  LDA DATA_metatiles_hi+0, X
  STA NES_PpuData
  LDA DATA_metatiles_hi+1, X
  STA NES_PpuData

  INC _MetatileOffs
  INY
  CPY #$10
  BNE @loop_hi
  INC NMI_TraceY
  RTS
.ENDPROC

; A = Pal ID
; PPUADDR must be set at pallete address
.PROC _LoadPal
  ; * 4
  ASL
  ASL
  TAX
  LDA DATA_pal, X
  STA NES_PpuData
  INX
  LDA DATA_pal, X
  STA NES_PpuData
  INX
  LDA DATA_pal, X
  STA NES_PpuData
  INX
  LDA DATA_pal, X
  STA NES_PpuData
  RTS
.ENDPROC

; A = ScrPal ID
.PROC _LoadScreenPal
  AddrTemp := $00
  ; * 8
  ASL
  ASL
  ASL
  STA AddrTemp

  PPU_SetAddr NES_PpuPalBkg0

  .REPEAT 8, I
    LDX AddrTemp
    LDA DATA_scrpal+I, X
    JSR _LoadPal
  .ENDREPEAT

  RTS
.ENDPROC

; A = screen ID
.PROC _LoadScreen
  STA ScreenID

  ; Load scrpal ID 
  ASL
  CLC
  ADC #1
  JSR _LoadScreenPal

  RTS
.ENDPROC

.MACRO NMI_DrawLine
  JSR _NMI_DrawLine
.ENDMACRO

.MACRO LoadScreen id
  LDA #id
  JSR _LoadScreen
.ENDMACRO

_RESET:
  ; Disable interrupts and decimal mode
  SEI 
  CLD 

  ; Disable APU frame interrupt & DMC IRQ
  LDX #1<<6
  STX NES_ApuFrame
  LDX #0
  STX NES_ApuDmc

  ; Stack setup
  LDX #$FF
  TXS 

  ; Disable NMI and rendering
  LDX #$00
  STX NES_PpuCtrl
  STX NES_PpuMask

  ; Wait for first vblank (Check N flag, bit 7 of PPUSTATUS)
  VBlank_Wait

  ; Clear RAM
  LDX #$00
  TXA
@clearmem:
  STA $0000,X
  STA $0100,X
  ; Skip $0200 OAM
  STA $0300,X
  STA $0400,X
  STA $0500,X
  STA $0600,X
  STA $0700,X
  INX
  BNE @clearmem

  ; Init OAM to $FF
  LDX #$00
  LDA #$FF
@oammemset:
  STA $0200,X
  INX
  BNE @oammemset

; Wait for second vblank
  VBlank_Wait
  
_USERINIT:
  LoadScreen 0

; enable drawing 
  ORA #%00011110
  STA NES_PpuMask

; enable NMI 
  LDA #%10000000
  STA NES_PpuCtrl

_LOOP:
  JMP _LOOP

_NMI:
  PHA
  TXA
  PHA
  TYA
  PHA

  ; acknowledge
  LDA NES_PpuStatus
  LDA #$02
  STA NES_PpuOamDma

  NMI_DrawLine

  LDA #$00
  STA NES_PpuScroll
  STA NES_PpuScroll

  PLA
  TAY
  PLA
  TAX
  PLA
  RTI

_IRQ:
  RTI

.INCLUDE "data.65s"
.INCLUDE "tlb.65s"
